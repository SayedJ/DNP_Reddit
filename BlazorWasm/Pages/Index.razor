@page "/"
@using Httpclient.ClientInterfaces
@using Domain.DTOs
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@using System.Security.Principal
@using Application
@using Application.DTOs
@using BlazorWasm.ModelsToPass
@using BootstrapBlazor.Components
@using Domain.Models
@using Console = System.Console
@using System.Collections
@using System.Security.Cryptography.X509Certificates
@inject IUserServices userServices
@inject IPostsService postServices
@inject ICommentService commentService
@inject NavigationManager navMgr



@if (isLoggedIn)
{
    <button type="button" class="btn btn-secondary" onclick="@GoToPosts">My Posts</button>
    
}
@foreach (var item in posts)
{
    <div class="container">
        <div class="row">
            <div class="col-md-6">
                <div>
                    <h3>@item.Title</h3>
                </div>
                <div>
                    @item.Description
                </div>
                <div>@item.Username</div>
                
            </div>
        </div>
    </div>
}


@code
{
    

    private string title;
    public Comments modal { get; set; }

    private int userId;               
    private int id;
    private int postId;
    private string name;
    private string sid;
    private int itemId;
    private int getCount;
    private string resultMsg;
    private int getAllCounts;
    private IEnumerable<PostRetrievingDto>? posts;
    private IEnumerable<CommentRetreivingDto>? comments;
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;
    private IEnumerable<Claim>? userClaims; 
    private bool isLoggedIn;
    private List<CommentRetreivingDto> commentsAdded;
    public bool showAddPost = false;
    public string iconChang = "fa-regular fa-comment-dots";
    

  
    private string message;
    private bool DialogIsOpen = false;
    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
        
        if (!isLoggedIn) return;
        
        userClaims = user.Claims;
         sid = user.FindFirst(c => c.Type == "sid")?.Value;

        id = Int32.Parse(sid);
        name = user.Identity!.Name!;

        await LoadPosts();

    }

    private async Task LoadPosts()
    {
        try
        {
            posts = await postServices.GetAllPosts() ?? new List<PostRetrievingDto>();
        }
        catch (Exception e)
        {
            resultMsg = e.Message;
            Console.WriteLine(e);
            throw new Exception(resultMsg);
        }
    }
    private async Task ShowHide()
    {
        if (!showAddPost)
        {
            showAddPost = true;
            iconChang = "fa-solid fa-minus";
        }
        else
        {
            showAddPost = false;
            iconChang = "fa-sharp fa-solid fa-plus";
        }
    }

    private async Task OnDelete()
    {
        try
        {
            await postServices.DeleteAsync(postId);
        }
        catch (Exception e)
        {
             resultMsg= e.Message;
            Console.WriteLine(e);
            
        }
       

    }

    private async Task GoToPosts()
    {
        
        User user = new();
        user = await userServices.GetUser(id);
        navMgr.NavigateTo($"/Posts/{user.Id}");
    }
    
    private async Task GoToCreate()
    {
        User user = new();
        user = await userServices.FindByUsername(name);
        navMgr.NavigateTo($"/Createnew/{user.Id}");
    }
    private async void OnModalDone(int idOfUser, string ti, string des, int posId)
    {
        
    // _description = des;
    // _postId = posId;
    // _commentorId = idOfUser;
    // commentTitle = ti;
        await modal.Done();

    }


}
