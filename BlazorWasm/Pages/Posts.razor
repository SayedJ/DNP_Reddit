@page "/Posts/{Id:int?}"
@using Httpclient.ClientInterfaces
@using Domain.Models
@using System.Security.Claims
@using Application.DTOs
@using Domain.DTOs
@inject IPostsService postService
@inject IVoteService voteService
@inject ICommentService commentServic;
@inject IJSRuntime JsRuntime


@attribute [Authorize(Roles = "Writer")]
<AuthorizeView>
    <Authorized>

        <div class="container">
            <div class="row">

                <h4>You have @posts.Count()  Posts</h4>
            </div>
            <div>
               
                <button type="button" @onclick="ShowHide"><i class=@iconChang></i></button>
                
            </div>
            <div>
                @if (!showAddPost)
                {
                    <p>nothing to show here</p>
                }
                else
                {
                    <AddPost></AddPost>
                }
                
            </div>
        </div>
        @if (posts == null)
        {
            <p>No posts to display</p>
        }
        else if (!posts.Any())
        {
            <p>No posts to display</p>
        }
        else
        {
            <div class="container">
                <div class="row">
                    @foreach (var item in posts)
                    {
                        <div class="offset-md-4 col-md-12">
                            <div class="col-md-8" style="background: lightblue;">
                               @item.Title
                            </div>
                            <div class="col-md-8" style="background: gainsboro; height: 150px;">
                                <p>@item.Description</p>
                            </div>
                            <div align="right">
                                <p>@item.Username</p>
                            </div>
                            <div class="row" style="child-align: right">
                                
                                <div class="col-1 col-md-1">
                            
                                </div>
                                <div class="col-2 col-sm-3 col-md-2" style=" color: red; text-shadow: 1px 1px 1px #c1d6cc; font-size: 1.5em;  text-align: center; margin: 5px">
                                    <button @onclick="() => LoadComments(item.Id)" class="btn"><i class="fa-regular fa-comment"></i> </button>
                                </div>

                                <div class="col-2 col-sm-3 col-md-2" style=" color: red; text-shadow: 1px 1px 1px #c1d6cc; font-size: 1.5em;  text-align: center; margin: 5px">
                                    <button @onclick="() => UpdateSymbol(item.Id)" class="btn"><i class="fa-solid fa-pen"></i> </button>
                                </div>
                                 
                                <div class="col-2 col-sm-3 col-md-2" style=" color: red; text-shadow: 1px 1px 1px #c1d6cc; font-size: 1.5em;  text-align: center; margin: 5px">
                                    <button @onclick="() => DeleteSymbol(item.Id)" class="btn"><i class="fa fa-trash"></i> </button>
                                </div>
                                
                            </div>
                        </div>
                        @if(showComments){
                        @if (comments == null)
                        {
                            <p>comments are null</p>
                        }
                        else if (!comments.Any())
                        {
                            
                            <p>No comments to display</p>
                        }
                        else
                        {
                            
                            <div class="container" style="margin-bottom: 10px">
                                <div class="row">
                                    <div class="offset-4 row-cols-md-3" style="background: gainsboro; border: #1a1e21 solid 2px">
                                        @foreach (var com in comments)
                                        {
                                            if(string.Equals(com.Post, item.Title, StringComparison.OrdinalIgnoreCase)){
                                                <div id="@item.Id">
                                                    <div>
                                                        <p id="@com.Username"><i>@com.Username</i></p>
                                                    </div>
                                                    <div class="offset-1">
                                                        <h6 id="@com.Title"><strong>@com.Title</strong></h6>

                                                    </div>
                                                    <div class="offset-2">
                                                        <p id="@com.Post">@com.Description</p>
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                            </div>

                        }
                        @if (!string.IsNullOrEmpty(resultMsg))
                        {
                            <label style="color: red">@resultMsg</label>
                        }
                        }
                    }
                </div>
            </div>
        }

        
     </Authorized>
</AuthorizeView>



@code {

    [Parameter]
    public int id { get; set; }

    private int postId;
    private int voteId;
    private string resultMsg;
    private string color;
    private int count = 0;
    private string role;
    private IEnumerable<PostRetrievingDto>? posts;
    private IEnumerable<Vote>? votes;
    private List<Comments>? commentstoDto;
    private IEnumerable<CommentRetreivingDto>? comments;
    private Comment commentToChange;
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;
    private int downVotes = 0;
    private int upVotes = 0;
    private bool showComments = false;
    private bool showAddPost = false;
    private string iconChang = "fa-sharp fa-solid fa-plus";
    private List<CommentRetreivingDto> commentsAdded = new List<CommentRetreivingDto>();
    private List<Vote> votesAdded = new List<Vote>();

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authState = await AuthState;
        ClaimsPrincipal user = authState.User;
        isLoggedIn = user.Identity != null;
    // await LoadComments(postId);
        if (!isLoggedIn) return;
        userClaims = user.Claims;

        await LoadPosts();


    }

    private async Task LoadPosts()
    {
        commentstoDto = new List<Comments>();
        commentToChange = new Comment();
        try
        {
            posts = await postService.GetAllMyPosts(id);
            
        }
        catch (Exception e)
        {
            resultMsg = e.Message;
            Console.WriteLine(e);
            throw new Exception(resultMsg);
        }
    }

    async Task LoadComments(int idTofind)
    {
        try
        {
            if (!showComments)
            {
                showComments = true;
                comments  = await commentServic.AllOfThisPostComments(idTofind);
            }
            else
            {
                showComments = false;
            }
            
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
      
        
        
    }

    // private async Task LoadComments(int id)
    // {
    //     try
    //     {
    //         comments = await commentServic.AllOfThisPostComments(id);
    //
    //     }
    //     catch (Exception e)
    //     {
    //         resultMsg = e.Message;
    //         Console.WriteLine(e);
    //         throw new Exception(resultMsg);
    //
    //     }
    // }

    // private async Task<IEnumerable<Vote>> LoadVotes(int thisId)
    // {
    //     try
    //     {
    //         votes = await voteService.GetAllVotesonThisPost(thisId);
    //         return votes;
    //     }
    //     catch (Exception e)
    //     {
    //         resultMsg = e.Message;
    //         Console.WriteLine(e);
    //         throw new Exception(resultMsg);
    //
    //     }
    // }

    private async Task ShowHide()
    {
        if (!showAddPost)
        {
            iconChang = "fa-solid fa-minus";
        }
        else
        {
            showAddPost = false;
            iconChang = "fa-sharp fa-solid fa-plus";
        }
    }
    
    async Task DeleteSymbol(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            await postService.DeleteAsync(id);
        }
    }

    async Task UpdateSymbol(int id)
    {
        // await postService
    }

  




}